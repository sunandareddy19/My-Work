pip install Adafruit_DHT pandas scikit-learn
import Adafruit_DHT
import time
import random
import pandas as pd
from datetime import datetime
from sklearn.linear_model import LinearRegression
import joblib

# Sensor configuration
DHT_SENSOR = Adafruit_DHT.DHT22
DHT_PIN = 4  # GPIO pin where the DHT22 is connected

# Simulated soil moisture sensor function
def read_soil_moisture():
    return random.uniform(20.0, 80.0)  # Returns a random soil moisture level

def read_sensors():
    humidity, temperature = Adafruit_DHT.read_retry(DHT_SENSOR, DHT_PIN)
    soil_moisture = read_soil_moisture()
    return humidity, temperature, soil_moisture

def log_data(data):
    df = pd.DataFrame(data, index=[0])
    df.to_csv('sensor_data.csv', mode='a', header=False, index=False)

def train_model():
    df = pd.read_csv('sensor_data.csv', names=['timestamp', 'humidity', 'temperature', 'soil_moisture'])
    X = df[['humidity', 'temperature']]
    y = df['soil_moisture']
    model = LinearRegression()
    model.fit(X, y)
    joblib.dump(model, 'irrigation_model.pkl')

def load_model():
    return joblib.load('irrigation_model.pkl')

def main():
    data_columns = ['timestamp', 'humidity', 'temperature', 'soil_moisture']
    try:
        pd.DataFrame(columns=data_columns).to_csv('sensor_data.csv', index=False)
    except:
        pass

    while True:
        humidity, temperature, soil_moisture = read_sensors()
        timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        data = {
            'timestamp': timestamp,
            'humidity': humidity,
            'temperature': temperature,
            'soil_moisture': soil_moisture
        }

        log_data(data)

        print(f"Timestamp: {timestamp}")
        if humidity is not None and temperature is not None:
            print(f"Temperature: {temperature:.2f}C")
            print(f"Humidity: {humidity:.2f}%")
        else:
            print("Failed to retrieve data from humidity sensor")

        print(f"Soil Moisture: {soil_moisture:.2f}%")

        if humidity and temperature:
            model = load_model()
            predicted_moisture = model.predict([[humidity, temperature]])[0]
            print(f"Predicted Soil Moisture: {predicted_moisture:.2f}%")
            if predicted_moisture < 30.0:
                print("Soil is predicted to be dry. Turning on the irrigation system.")
            elif predicted_moisture > 70.0:
                print("Soil is predicted to be too wet. Turning off the irrigation system.")
            else:
                print("Soil moisture is predicted to be optimal.")

        time.sleep(10)  # Wait for 10 seconds before reading again

if __name__ == "__main__":
    main()

